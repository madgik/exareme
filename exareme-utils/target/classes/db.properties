# ---------------------------------------------------------------------------- #
# Database configuration file                                                  #
# ---------------------------------------------------------------------------- #

# DB Engine
# ---------------------------------------------------------------------------- #
db.engine.pageSize_b=65536
db.engine.defaultMemory_mb = 500
db.engine.memory.select = 1
db.engine.memory.dm = 1
db.engine.memory.bufferMB = 1
#db.engine.script.additional=select load_extension('libspatialite.so.3');

# DB Scheduler
# ---------------------------------------------------------------------------- #
# FIFO
# PAR_INDEX
# PAR_ALL
db.scheduler.exec.method=FIFO
db.scheduler.pathRoot=adpdb/


# Execution
# ---------------------------------------------------------------------------- #
# simple    = copy intermediate results.
# optimized = link files without copying in the same container.
db.execution.method=optimized
# true = only the used columns are transferred.
db.execution.filterUnusedColumns=true

# Optimizers
# ---------------------------------------------------------------------------- #
db.optimizer.scheduler.algorithm.count=1
#db.optimizer.scheduler.algorithm.1.name=parallelWave2.ParallelWaveOptimizer2
db.optimizer.scheduler.algorithm.1.name=ParallelWaveScheduler


# DB Optimizer
# ---------------------------------------------------------------------------- #
# Assume two plans to be equal if their L2 distance is smaller than this value.
db.optimizer.scheduler.asumeEqualUnder=2.0
# 2D scheduling algorithm
db.optimizer.scheduler.algorithm.index=1
# Skyline choice
# fast, cheap, balanced
db.optimizer.scheduler.plan.choice=fast

# Simulated annealing properties
# ---------------------------------------------------------------------------- #
db.optimizer.scheduler.algorithm.sa.maxSteps=1000
db.optimizer.scheduler.algorithm.sa.phases=1

# DB Optimizer RunTime/Financial Properties
# ---------------------------------------------------------------------------- #
# in MB/sec
db.optimizer.scheduler.runtime.diskThroughput=20.0
db.optimizer.scheduler.runtime.networkSpeed=10.0
# in seconds
db.optimizer.scheduler.runtime.quantum=10.0

# DB What-If scenarios
# ---------------------------------------------------------------------------- #
db.optimizer.scheduler.whatif.use=false
# Run exhaustive if the total number of schedules is under this number
db.optimizer.scheduler.whatif.exhaustiveThreshold=150000
# Run the following algorithms
db.optimizer.scheduler.whatif.algs=[]

# DB Client
# ---------------------------------------------------------------------------- #
db.client.statisticsBuckets=10
# The frequency of the update (in seconds).
db.client.statisticsUpdate_sec=2
# Force exit after the specified number of seconds.
db.client.forceExit_sec=3

# off
# lz4
db.execute.compresion=lz4
