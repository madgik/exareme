package madgik.exareme.utils.graph;

import madgik.exareme.utils.graph.edge.Edge;

import java.io.Serializable;
import java.util.Set;

/**
 * The root interface that all Graphs implement. Graph represents a graph G(V,
 * E) that contains a set of vertices V and edges E that link the vertices.
 * Directed or undirected graphs are a matter of implementing Graph and weighted
 * graphs can be generated by using graph.WeightedEdge.
 *
 * @author konikos
 */
public interface Graph<V, E extends Edge<V>> extends Serializable {

    /**
     * Adds an edge between source and target if e doesn't already exist in the
     * graph. The vertices of the edge must be in the graph, otherwise
     * IllegalArgumentException is thrown
     *
     * @param e the edge.
     * @return true if e was added to the graph, false if e was already in the
     * graph.
     * @throws IllegalArgumentException If the vertices of the edge are not in the
     *                                  graph.
     */
    boolean addEdge(E e);

    /**
     * Adds a vertex to the graph
     *
     * @param v the vertex to be added
     * @return true if the vertex wasn't already in the graph, false otherwise
     */
    boolean addVertex(V v);

    /**
     * Checks if an edge between two vertices exists
     *
     * @return true if the graph contains the edge
     */
    boolean containsEdge(V source, V target);

    /**
     * Checks if the given vertex exists in the graph
     *
     * @return true if the graph contains the vertex
     */
    boolean containsVertex(V v);

    /**
     * Gets an unmodifiable set that contains all the vertices in the graph. If
     * the graph is modified while the returned set is iterated, the iteration
     * results are undefined.
     *
     * @return the set of vertices in the graph.
     */
    Set<V> verticesSet();

    /**
     * Gets an edge that exists between source and target
     *
     * @param source
     * @param target
     * @return the edge between source and target
     * @throws IllegalArgumentException If source or target isn't in the graph.
     */
    E getEdge(V source, V target);

    /**
     * Gets an unmodifiable set of all the edges in the graph. If the graph is
     * modified while the returned set is iterated, the iteration results are
     * undefined.
     *
     * @return a set of the edges contained in the graph
     */
    Set<E> edgesSet();

    /**
     * Gets an unmodifiable set of all the edges touch v. If v does not exist,
     * IllegalArgumentException is thrown.
     *
     * @param v a vertex in the graph
     * @return a set of all edges going from or to V.
     * @throws IllegalArgumentException If v is not in the graph.
     */
    Set<E> edgesSet(V v);

    /**
     * Gets a unmodifiable set of all the edges between source and target.
     *
     * @return a set of all the edges between source and target.
     * @throws IllegalArgumentException If source or target isn't in the graph.
     */
    Set<E> edgesSet(V source, V target);

    /**
     * Removes an edge between source and target.
     *
     * @param source
     * @param target
     * @return the edge that was removed, null if no edge was found
     * @throws IllegalArgumentException If source or target isn't in the graph.
     */
    E removeEdge(V source, V target);

    /**
     * Removes the specified edge from the graph.
     *
     * @param e
     * @return true if the edge was removed.
     * @throws IllegalArgumentException If the vertices of the edges aren't in the
     *                                  graph.
     */
    boolean removeEdge(E e);

    /**
     * Removes any edge that exist in the graph
     *
     * @return true if any edge was removed.
     */
    boolean removeAllEdges();

    /**
     * Removes the specified vertex and any related edges from the graph
     *
     * @param v the vertex to be removed
     * @return true if v was in the v
     */
    boolean removeVertex(V v);

    /**
     * Removes all vertices and edges from the graph
     *
     * @return true if any vertex was removed.
     */
    boolean removeAllVertices();
}
