/* Generated By:JavaCC: Do not edit this line. AdpDBQueryParser.java */
package madgik.exareme.master.engine.parser;

import madgik.exareme.common.schema.expression.*;

import java.util.ArrayList;
import java.util.List;

public class AdpDBQueryParser implements AdpDBQueryParserConstants {

    final public SQLScript parseScript() throws ParseException {
        SQLScript script = new SQLScript();
        SQLSelect s = null;
        SQLBuildIndex bi = null;
        SQLDropIndex di = null;
        SQLDropTable dt = null;
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            jj_consume_token(WHITE);
        }
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SINGLE_LINE_COMMENT:
                case SINGLE_LINE_COMMENT_2:
                case USING:
                case DISTRIBUTED:
                    ;
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_2;
            }
            if (jj_2_1(10)) {
                s = parseQuery();
                label_3:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[2] = jj_gen;
                            break label_3;
                    }
                    jj_consume_token(WHITE);
                }
                script.addSelect(s);
            } else if (jj_2_2(10)) {
                bi = parseBuildIndex();
                label_4:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[3] = jj_gen;
                            break label_4;
                    }
                    jj_consume_token(WHITE);
                }
                script.addBuildIndex(bi);
            } else if (jj_2_3(10)) {
                di = parseDropIndex();
                label_5:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[4] = jj_gen;
                            break label_5;
                    }
                    jj_consume_token(WHITE);
                }
                script.addDropIndex(di);
            } else if (jj_2_4(10)) {
                dt = parseDropTable();
                label_6:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[5] = jj_gen;
                            break label_6;
                    }
                    jj_consume_token(WHITE);
                }
                script.addDropTable(dt);
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        jj_consume_token(0);
        {
            if (true)
                return script;
        }
        throw new Error("Missing return statement in function");
    }

    final public Comments parseComment() throws ParseException {
        Comments comments = new Comments();
        Token c = null;
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SINGLE_LINE_COMMENT:
                case SINGLE_LINE_COMMENT_2:
                    ;
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    break label_7;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SINGLE_LINE_COMMENT:
                    c = jj_consume_token(SINGLE_LINE_COMMENT);
                    comments.addLine(c.toString());
                    break;
                case SINGLE_LINE_COMMENT_2:
                    c = jj_consume_token(SINGLE_LINE_COMMENT_2);
                    comments.addLine(c.toString());
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true)
                return comments;
        }
        throw new Error("Missing return statement in function");
    }

    final public SQLSelect parseQuery() throws ParseException {
        SQLSelect q = new SQLSelect();
        Comments comments = null;
        Token tableName = null;
        boolean isTemporary = false;
        boolean isScript = false;
        Token sqlQuery = null;
        Token t = null;
        DataPattern inputPattern = DataPattern.cartesian_product;
        DataPattern outputPattern = DataPattern.same;
        Token parts = null;
        String partsDefn = null;
        List<String> tables = null;
        comments = parseComment();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case USING:
                jj_consume_token(USING);
                label_8:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[8] = jj_gen;
                            break label_8;
                    }
                    jj_consume_token(WHITE);
                }
                tables = usingTables();
                label_9:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[9] = jj_gen;
                            break label_9;
                    }
                    jj_consume_token(WHITE);
                }
                break;
            default:
                jj_la1[10] = jj_gen;
                ;
        }
        jj_consume_token(DISTRIBUTED);
        label_10:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[11] = jj_gen;
                    break label_10;
            }
            jj_consume_token(WHITE);
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case AT:
                jj_consume_token(AT);
                label_11:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[12] = jj_gen;
                            break label_11;
                    }
                    jj_consume_token(WHITE);
                }
                partsDefn = parsePartsDefn();
                label_12:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[13] = jj_gen;
                            break label_12;
                    }
                    jj_consume_token(WHITE);
                }
                break;
            default:
                jj_la1[14] = jj_gen;
                ;
        }
        jj_consume_token(CREATE);
        label_13:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[15] = jj_gen;
                    break label_13;
            }
            jj_consume_token(WHITE);
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TEMP:
            case TEMPORARY:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case TEMPORARY:
                        jj_consume_token(TEMPORARY);
                        break;
                    case TEMP:
                        jj_consume_token(TEMP);
                        break;
                    default:
                        jj_la1[16] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                label_14:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[17] = jj_gen;
                            break label_14;
                    }
                    jj_consume_token(WHITE);
                }
                isTemporary = true;
                break;
            default:
                jj_la1[18] = jj_gen;
                ;
        }
        jj_consume_token(TABLE);
        label_15:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[19] = jj_gen;
                    break label_15;
            }
            jj_consume_token(WHITE);
        }
        tableName = jj_consume_token(IDENTIFIER);
        label_16:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    break label_16;
            }
            jj_consume_token(WHITE);
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TO:
                jj_consume_token(TO);
                label_17:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[21] = jj_gen;
                            break label_17;
                    }
                    jj_consume_token(WHITE);
                }
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case DIGIT:
                        parts = jj_consume_token(DIGIT);
                        break;
                    case NUMBER:
                        parts = jj_consume_token(NUMBER);
                        break;
                    default:
                        jj_la1[22] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                label_18:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[23] = jj_gen;
                            break label_18;
                    }
                    jj_consume_token(WHITE);
                }
                outputPattern = DataPattern.many;
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ON:
                        jj_consume_token(ON);
                        label_19:
                        while (true) {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case WHITE:
                                    ;
                                    break;
                                default:
                                    jj_la1[24] = jj_gen;
                                    break label_19;
                            }
                            jj_consume_token(WHITE);
                        }
                        t = jj_consume_token(IDENTIFIER);
                        q.addPartitionColumn(t.toString());
                        label_20:
                        while (true) {
                            if (jj_2_5(2)) {
                                ;
                            } else {
                                break label_20;
                            }
                            label_21:
                            while (true) {
                                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                    case WHITE:
                                        ;
                                        break;
                                    default:
                                        jj_la1[25] = jj_gen;
                                        break label_21;
                                }
                                jj_consume_token(WHITE);
                            }
                            jj_consume_token(COMMA);
                            label_22:
                            while (true) {
                                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                    case WHITE:
                                        ;
                                        break;
                                    default:
                                        jj_la1[26] = jj_gen;
                                        break label_22;
                                }
                                jj_consume_token(WHITE);
                            }
                            t = jj_consume_token(IDENTIFIER);
                            q.addPartitionColumn(t.toString());
                        }
                        label_23:
                        while (true) {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case WHITE:
                                    ;
                                    break;
                                default:
                                    jj_la1[27] = jj_gen;
                                    break label_23;
                            }
                            jj_consume_token(WHITE);
                        }
                        break;
                    default:
                        jj_la1[28] = jj_gen;
                        ;
                }
                break;
            default:
                jj_la1[29] = jj_gen;
                ;
        }
        jj_consume_token(AS);
        label_24:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[30] = jj_gen;
                    break label_24;
            }
            jj_consume_token(WHITE);
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case DIRECT:
            case DIRECTSCRIPT:
            case TREE:
            case EXTERNAL:
            case REMOTE:
            case VIRTUAL:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case DIRECT:
                        jj_consume_token(DIRECT);
                        label_25:
                        while (true) {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case WHITE:
                                    ;
                                    break;
                                default:
                                    jj_la1[31] = jj_gen;
                                    break label_25;
                            }
                            jj_consume_token(WHITE);
                        }
                        inputPattern = DataPattern.direct_product;
                        break;
                    case DIRECTSCRIPT:
                        jj_consume_token(DIRECTSCRIPT);
                        label_26:
                        while (true) {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case WHITE:
                                    ;
                                    break;
                                default:
                                    jj_la1[32] = jj_gen;
                                    break label_26;
                            }
                            jj_consume_token(WHITE);
                        }
                        inputPattern = DataPattern.direct_product;
                        isScript = true;
                        break;
                    case EXTERNAL:
                        jj_consume_token(EXTERNAL);
                        label_27:
                        while (true) {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case WHITE:
                                    ;
                                    break;
                                default:
                                    jj_la1[33] = jj_gen;
                                    break label_27;
                            }
                            jj_consume_token(WHITE);
                        }
                        inputPattern = DataPattern.external;
                        break;
                    case REMOTE:
                        jj_consume_token(REMOTE);
                        label_28:
                        while (true) {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case WHITE:
                                    ;
                                    break;
                                default:
                                    jj_la1[34] = jj_gen;
                                    break label_28;
                            }
                            jj_consume_token(WHITE);
                        }
                        inputPattern = DataPattern.remote;
                        break;
                    case VIRTUAL:
                        jj_consume_token(VIRTUAL);
                        label_29:
                        while (true) {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case WHITE:
                                    ;
                                    break;
                                default:
                                    jj_la1[35] = jj_gen;
                                    break label_29;
                            }
                            jj_consume_token(WHITE);
                        }
                        inputPattern = DataPattern.virtual;
                        break;
                    case TREE:
                        jj_consume_token(TREE);
                        label_30:
                        while (true) {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case WHITE:
                                    ;
                                    break;
                                default:
                                    jj_la1[36] = jj_gen;
                                    break label_30;
                            }
                            jj_consume_token(WHITE);
                        }
                        inputPattern = DataPattern.tree;
                        break;
                    default:
                        jj_la1[37] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[38] = jj_gen;
                ;
        }
        sqlQuery = jj_consume_token(SQL_QUERY);
        jj_consume_token(SEMICOLON);
        q.setComments(comments);
        q.setPartsDefn(partsDefn);
        q.setResultTable(tableName.toString(), isTemporary, isScript);
        q.setInputDataPattern(inputPattern);
        q.setOutputDataPattern(outputPattern);
        if (parts != null) {
            q.setNumberOfOutputPartitions(Integer.parseInt(parts.toString()));
        }
        q.setSql(sqlQuery.toString());
        if (tables != null) {
            for (String name : tables) {
                q.setUsingTBL(name);
            }
        }

        {
            if (true)
                return q;
        }
        throw new Error("Missing return statement in function");
    }

    final public SQLBuildIndex parseBuildIndex() throws ParseException {
        SQLBuildIndex index = new SQLBuildIndex();
        Comments comments = null;
        Token indexName = null;
        Token table = null;
        Token t = null;
        String partsDefn = null;
        comments = parseComment();
        jj_consume_token(DISTRIBUTED);
        label_31:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[39] = jj_gen;
                    break label_31;
            }
            jj_consume_token(WHITE);
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case AT:
                jj_consume_token(AT);
                label_32:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[40] = jj_gen;
                            break label_32;
                    }
                    jj_consume_token(WHITE);
                }
                partsDefn = parsePartsDefn();
                label_33:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[41] = jj_gen;
                            break label_33;
                    }
                    jj_consume_token(WHITE);
                }
                break;
            default:
                jj_la1[42] = jj_gen;
                ;
        }
        jj_consume_token(CREATE);
        label_34:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[43] = jj_gen;
                    break label_34;
            }
            jj_consume_token(WHITE);
        }
        jj_consume_token(INDEX);
        label_35:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[44] = jj_gen;
                    break label_35;
            }
            jj_consume_token(WHITE);
        }
        indexName = jj_consume_token(IDENTIFIER);
        label_36:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[45] = jj_gen;
                    break label_36;
            }
            jj_consume_token(WHITE);
        }
        jj_consume_token(ON);
        label_37:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[46] = jj_gen;
                    break label_37;
            }
            jj_consume_token(WHITE);
        }
        table = jj_consume_token(IDENTIFIER);
        jj_consume_token(39);
        t = jj_consume_token(IDENTIFIER);
        index.addColumn(t.toString());
        label_38:
        while (true) {
            if (jj_2_6(2)) {
                ;
            } else {
                break label_38;
            }
            label_39:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case WHITE:
                        ;
                        break;
                    default:
                        jj_la1[47] = jj_gen;
                        break label_39;
                }
                jj_consume_token(WHITE);
            }
            jj_consume_token(COMMA);
            label_40:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case WHITE:
                        ;
                        break;
                    default:
                        jj_la1[48] = jj_gen;
                        break label_40;
                }
                jj_consume_token(WHITE);
            }
            t = jj_consume_token(IDENTIFIER);
            index.addColumn(t.toString());
        }
        label_41:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[49] = jj_gen;
                    break label_41;
            }
            jj_consume_token(WHITE);
        }
        jj_consume_token(40);
        jj_consume_token(SEMICOLON);
        index.setComments(comments);
        index.setPartsDefn(partsDefn);
        index.setIndexName(indexName.toString());
        index.setTable(table.toString());
        {
            if (true)
                return index;
        }
        throw new Error("Missing return statement in function");
    }

    final public SQLDropIndex parseDropIndex() throws ParseException {
        Comments comments = null;
        SQLDropIndex di = new SQLDropIndex();
        Token indexName = null;
        Token table = null;
        String partsDefn = null;
        comments = parseComment();
        jj_consume_token(DISTRIBUTED);
        label_42:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[50] = jj_gen;
                    break label_42;
            }
            jj_consume_token(WHITE);
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case AT:
                jj_consume_token(AT);
                label_43:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[51] = jj_gen;
                            break label_43;
                    }
                    jj_consume_token(WHITE);
                }
                partsDefn = parsePartsDefn();
                label_44:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[52] = jj_gen;
                            break label_44;
                    }
                    jj_consume_token(WHITE);
                }
                break;
            default:
                jj_la1[53] = jj_gen;
                ;
        }
        jj_consume_token(DROP);
        label_45:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[54] = jj_gen;
                    break label_45;
            }
            jj_consume_token(WHITE);
        }
        jj_consume_token(INDEX);
        label_46:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[55] = jj_gen;
                    break label_46;
            }
            jj_consume_token(WHITE);
        }
        table = jj_consume_token(IDENTIFIER);
        jj_consume_token(41);
        indexName = jj_consume_token(IDENTIFIER);
        jj_consume_token(SEMICOLON);
        di.setComments(comments);
        di.setPartsDefn(partsDefn);
        di.setTable(table.toString());
        di.setIndexName(indexName.toString());
        {
            if (true)
                return di;
        }
        throw new Error("Missing return statement in function");
    }

    final public SQLDropTable parseDropTable() throws ParseException {
        Comments comments = null;
        SQLDropTable dt = new SQLDropTable();
        Token table = null;
        String partsDefn = null;
        comments = parseComment();
        jj_consume_token(DISTRIBUTED);
        label_47:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[56] = jj_gen;
                    break label_47;
            }
            jj_consume_token(WHITE);
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case AT:
                jj_consume_token(AT);
                label_48:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[57] = jj_gen;
                            break label_48;
                    }
                    jj_consume_token(WHITE);
                }
                partsDefn = parsePartsDefn();
                label_49:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case WHITE:
                            ;
                            break;
                        default:
                            jj_la1[58] = jj_gen;
                            break label_49;
                    }
                    jj_consume_token(WHITE);
                }
                break;
            default:
                jj_la1[59] = jj_gen;
                ;
        }
        jj_consume_token(DROP);
        label_50:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[60] = jj_gen;
                    break label_50;
            }
            jj_consume_token(WHITE);
        }
        jj_consume_token(TABLE);
        label_51:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case WHITE:
                    ;
                    break;
                default:
                    jj_la1[61] = jj_gen;
                    break label_51;
            }
            jj_consume_token(WHITE);
        }
        table = jj_consume_token(IDENTIFIER);
        jj_consume_token(SEMICOLON);
        dt.setComments(comments);
        dt.setPartsDefn(partsDefn);
        dt.setTable(table.toString());
        {
            if (true)
                return dt;
        }
        throw new Error("Missing return statement in function");
    }

    final public String parsePartsDefn() throws ParseException {
        Token partsDefn = null;
        partsDefn = jj_consume_token(SBBLOCK);
        {
            if (true)
                return partsDefn.toString();
        }
        throw new Error("Missing return statement in function");
    }

    final public List<String> usingTables() throws ParseException {
        List<String> tables = new ArrayList<String>();
        Token table = null;
        table = jj_consume_token(IDENTIFIER);
        tables.add(table.toString().toLowerCase());
        table = null;
        label_52:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[62] = jj_gen;
                    break label_52;
            }
            jj_consume_token(COMMA);
            table = jj_consume_token(IDENTIFIER);
            tables.add(table.toString());
            table = null;
        }
        {
            if (true)
                return tables;
        }
        throw new Error("Missing return statement in function");
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_3R_58() {
        if (jj_scan_token(USING))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_67())
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_53() {
        if (jj_3R_57())
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_58())
            jj_scanpos = xsp;
        if (jj_scan_token(DISTRIBUTED))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_59())
            jj_scanpos = xsp;
        if (jj_scan_token(CREATE))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_60())
            jj_scanpos = xsp;
        if (jj_scan_token(TABLE))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(IDENTIFIER))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_61())
            jj_scanpos = xsp;
        if (jj_scan_token(AS))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_62())
            jj_scanpos = xsp;
        if (jj_scan_token(SQL_QUERY))
            return true;
        if (jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    private boolean jj_3R_75() {
        if (jj_scan_token(TREE))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_74() {
        if (jj_scan_token(VIRTUAL))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_73() {
        if (jj_scan_token(REMOTE))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_72() {
        if (jj_scan_token(EXTERNAL))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_64() {
        if (jj_scan_token(AT))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_68())
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_54() {
        if (jj_3R_57())
            return true;
        if (jj_scan_token(DISTRIBUTED))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_63())
            jj_scanpos = xsp;
        if (jj_scan_token(CREATE))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(INDEX))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(IDENTIFIER))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(ON))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(IDENTIFIER))
            return true;
        if (jj_scan_token(39))
            return true;
        if (jj_scan_token(IDENTIFIER))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_6()) {
                jj_scanpos = xsp;
                break;
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(40))
            return true;
        if (jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    private boolean jj_3R_56() {
        if (jj_3R_57())
            return true;
        if (jj_scan_token(DISTRIBUTED))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_65())
            jj_scanpos = xsp;
        if (jj_scan_token(DROP))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(TABLE))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(IDENTIFIER))
            return true;
        if (jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    private boolean jj_3R_77() {
        if (jj_scan_token(SINGLE_LINE_COMMENT_2))
            return true;
        return false;
    }

    private boolean jj_3R_76() {
        if (jj_scan_token(SINGLE_LINE_COMMENT))
            return true;
        return false;
    }

    private boolean jj_3R_66() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_76()) {
            jj_scanpos = xsp;
            if (jj_3R_77())
                return true;
        }
        return false;
    }

    private boolean jj_3R_59() {
        if (jj_scan_token(AT))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_68())
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_71() {
        if (jj_scan_token(DIRECTSCRIPT))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_57() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_66()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_70() {
        if (jj_scan_token(DIRECT))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_62() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_70()) {
            jj_scanpos = xsp;
            if (jj_3R_71()) {
                jj_scanpos = xsp;
                if (jj_3R_72()) {
                    jj_scanpos = xsp;
                    if (jj_3R_73()) {
                        jj_scanpos = xsp;
                        if (jj_3R_74()) {
                            jj_scanpos = xsp;
                            if (jj_3R_75())
                                return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_5() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(COMMA))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_63() {
        if (jj_scan_token(AT))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_68())
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_6() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(COMMA))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3_4() {
        if (jj_3R_56())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_3() {
        if (jj_3R_55())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_78() {
        if (jj_scan_token(COMMA))
            return true;
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_54())
            return true;
        return false;
    }

    private boolean jj_3R_69() {
        if (jj_scan_token(ON))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(IDENTIFIER))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_5()) {
                jj_scanpos = xsp;
                break;
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_53())
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_55() {
        if (jj_3R_57())
            return true;
        if (jj_scan_token(DISTRIBUTED))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_64())
            jj_scanpos = xsp;
        if (jj_scan_token(DROP))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(INDEX))
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(IDENTIFIER))
            return true;
        if (jj_scan_token(41))
            return true;
        if (jj_scan_token(IDENTIFIER))
            return true;
        if (jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    private boolean jj_3R_65() {
        if (jj_scan_token(AT))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_3R_68())
            return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_67() {
        if (jj_scan_token(IDENTIFIER))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_78()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_61() {
        if (jj_scan_token(TO))
            return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_scan_token(34)) {
            jj_scanpos = xsp;
            if (jj_scan_token(35))
                return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        xsp = jj_scanpos;
        if (jj_3R_69())
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_68() {
        if (jj_scan_token(SBBLOCK))
            return true;
        return false;
    }

    private boolean jj_3R_60() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(11)) {
            jj_scanpos = xsp;
            if (jj_scan_token(10))
                return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_scan_token(33)) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Generated Token Manager.
     */
    public AdpDBQueryParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[63];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 =
            new int[] {0x0, 0xcc, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0,
                0x4000000, 0x0, 0xc00, 0x0, 0xc00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x10000, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfc0000, 0xfc0000, 0x0, 0x0,
                0x0, 0x4000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000000, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x4000000, 0x0, 0x0, 0x2000000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 =
            new int[] {0x2, 0x0, 0x2, 0x2, 0x2, 0x2, 0x0, 0x0, 0x2, 0x2, 0x0, 0x2, 0x2, 0x2, 0x0,
                0x2, 0x0, 0x2, 0x0, 0x2, 0x2, 0x2, 0xc, 0x2, 0x2, 0x2, 0x2, 0x2, 0x0, 0x0, 0x2, 0x2,
                0x2, 0x2, 0x2, 0x2, 0x2, 0x0, 0x0, 0x2, 0x2, 0x2, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,
                0x2, 0x2, 0x2, 0x2, 0x0, 0x2, 0x2, 0x2, 0x2, 0x2, 0x0, 0x2, 0x2, 0x0,};
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[6];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /**
     * Constructor with InputStream.
     */
    public AdpDBQueryParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public AdpDBQueryParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new AdpDBQueryParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 63; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 63; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor.
     */
    public AdpDBQueryParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new AdpDBQueryParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 63; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 63; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor with generated Token Manager.
     */
    public AdpDBQueryParser(AdpDBQueryParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 63; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(AdpDBQueryParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 63; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen)
                            c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error {
    }


    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null)
                jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind)
            return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos)
            throw jj_ls;
        return false;
    }


    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100)
            return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                exists = true;
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists)
                        break;
                }
            }
            if (!exists)
                jj_expentries.add(jj_expentry);
            if (pos != 0)
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[42];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 63; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 42; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 6; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
