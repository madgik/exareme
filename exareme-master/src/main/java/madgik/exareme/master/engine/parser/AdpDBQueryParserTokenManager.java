/* Generated By:JavaCC: Do not edit this line. AdpDBQueryParserTokenManager.java */
package madgik.exareme.master.engine.parser;

/**
 * Token Manager.
 */
public class AdpDBQueryParserTokenManager implements AdpDBQueryParserConstants {

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 40:
                jjmatchedKind = 39;
                return jjMoveNfa_0(5, 0);
            case 41:
                jjmatchedKind = 40;
                return jjMoveNfa_0(5, 0);
            case 44:
                jjmatchedKind = 25;
                return jjMoveNfa_0(5, 0);
            case 46:
                jjmatchedKind = 41;
                return jjMoveNfa_0(5, 0);
            case 47:
                return jjMoveStringLiteralDfa1_0(0x2L);
            case 59:
                jjmatchedKind = 27;
                return jjMoveNfa_0(5, 0);
            case 65:
                return jjMoveStringLiteralDfa1_0(0x4020000L);
            case 67:
                return jjMoveStringLiteralDfa1_0(0x100L);
            case 68:
                return jjMoveStringLiteralDfa1_0(0xc0280L);
            case 69:
                return jjMoveStringLiteralDfa1_0(0x200000L);
            case 73:
                return jjMoveStringLiteralDfa1_0(0x2000L);
            case 79:
                return jjMoveStringLiteralDfa1_0(0x10000L);
            case 80:
                return jjMoveStringLiteralDfa1_0(0x8000L);
            case 82:
                return jjMoveStringLiteralDfa1_0(0x400000L);
            case 83:
                return jjMoveStringLiteralDfa1_0(0x1000000L);
            case 84:
                return jjMoveStringLiteralDfa1_0(0x105c00L);
            case 85:
                return jjMoveStringLiteralDfa1_0(0x40L);
            case 86:
                return jjMoveStringLiteralDfa1_0(0x800000L);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x4020000L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x100L);
            case 100:
                return jjMoveStringLiteralDfa1_0(0xc0280L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x200000L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x2000L);
            case 111:
                return jjMoveStringLiteralDfa1_0(0x10000L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x8000L);
            case 114:
                return jjMoveStringLiteralDfa1_0(0x400000L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x1000000L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x105c00L);
            case 117:
                return jjMoveStringLiteralDfa1_0(0x40L);
            case 118:
                return jjMoveStringLiteralDfa1_0(0x800000L);
            default:
                return jjMoveNfa_0(5, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(5, 0);
        }
        switch (curChar) {
            case 42:
                if ((active0 & 0x2L) != 0L) {
                    jjmatchedKind = 1;
                    jjmatchedPos = 1;
                }
                break;
            case 65:
                return jjMoveStringLiteralDfa2_0(active0, 0x9000L);
            case 69:
                return jjMoveStringLiteralDfa2_0(active0, 0x1400c00L);
            case 73:
                return jjMoveStringLiteralDfa2_0(active0, 0x8c0080L);
            case 78:
                if ((active0 & 0x10000L) != 0L) {
                    jjmatchedKind = 16;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
            case 79:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 14;
                    jjmatchedPos = 1;
                }
                break;
            case 82:
                return jjMoveStringLiteralDfa2_0(active0, 0x100300L);
            case 83:
                if ((active0 & 0x20000L) != 0L) {
                    jjmatchedKind = 17;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x40L);
            case 84:
                if ((active0 & 0x4000000L) != 0L) {
                    jjmatchedKind = 26;
                    jjmatchedPos = 1;
                }
                break;
            case 88:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x9000L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x1400c00L);
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x8c0080L);
            case 110:
                if ((active0 & 0x10000L) != 0L) {
                    jjmatchedKind = 16;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
            case 111:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 14;
                    jjmatchedPos = 1;
                }
                break;
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x100300L);
            case 115:
                if ((active0 & 0x20000L) != 0L) {
                    jjmatchedKind = 17;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x40L);
            case 116:
                if ((active0 & 0x4000000L) != 0L) {
                    jjmatchedKind = 26;
                    jjmatchedPos = 1;
                }
                break;
            case 120:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
            default:
                break;
        }
        return jjMoveNfa_0(5, 1);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(5, 1);
        }
        switch (curChar) {
            case 66:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
            case 68:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
            case 69:
                return jjMoveStringLiteralDfa3_0(active0, 0x100100L);
            case 73:
                return jjMoveStringLiteralDfa3_0(active0, 0x40L);
            case 76:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
            case 77:
                return jjMoveStringLiteralDfa3_0(active0, 0x400c00L);
            case 79:
                return jjMoveStringLiteralDfa3_0(active0, 0x200L);
            case 82:
                return jjMoveStringLiteralDfa3_0(active0, 0x8c8000L);
            case 83:
                return jjMoveStringLiteralDfa3_0(active0, 0x80L);
            case 84:
                return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
            case 98:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
            case 100:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x100100L);
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x40L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
            case 109:
                return jjMoveStringLiteralDfa3_0(active0, 0x400c00L);
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0x200L);
            case 114:
                return jjMoveStringLiteralDfa3_0(active0, 0x8c8000L);
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x80L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
            default:
                break;
        }
        return jjMoveNfa_0(5, 2);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(5, 2);
        }
        switch (curChar) {
            case 65:
                return jjMoveStringLiteralDfa4_0(active0, 0x100L);
            case 69:
                if ((active0 & 0x100000L) != 0L) {
                    jjmatchedKind = 20;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x12c2000L);
            case 76:
                return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
            case 78:
                return jjMoveStringLiteralDfa4_0(active0, 0x40L);
            case 79:
                return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
            case 80:
                if ((active0 & 0x200L) != 0L) {
                    jjmatchedKind = 9;
                    jjmatchedPos = 3;
                } else if ((active0 & 0x400L) != 0L) {
                    jjmatchedKind = 10;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x800L);
            case 84:
                return jjMoveStringLiteralDfa4_0(active0, 0x808080L);
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x100L);
            case 101:
                if ((active0 & 0x100000L) != 0L) {
                    jjmatchedKind = 20;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x12c2000L);
            case 108:
                return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
            case 110:
                return jjMoveStringLiteralDfa4_0(active0, 0x40L);
            case 111:
                return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
            case 112:
                if ((active0 & 0x200L) != 0L) {
                    jjmatchedKind = 9;
                    jjmatchedPos = 3;
                } else if ((active0 & 0x400L) != 0L) {
                    jjmatchedKind = 10;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x800L);
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x808080L);
            default:
                break;
        }
        return jjMoveNfa_0(5, 3);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 3);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(5, 3);
        }
        switch (curChar) {
            case 67:
                return jjMoveStringLiteralDfa5_0(active0, 0x10c0000L);
            case 69:
                if ((active0 & 0x1000L) != 0L) {
                    jjmatchedKind = 12;
                    jjmatchedPos = 4;
                }
                break;
            case 71:
                if ((active0 & 0x40L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 4;
                }
                break;
            case 73:
                return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
            case 79:
                return jjMoveStringLiteralDfa5_0(active0, 0x800L);
            case 82:
                return jjMoveStringLiteralDfa5_0(active0, 0x200080L);
            case 84:
                return jjMoveStringLiteralDfa5_0(active0, 0x400100L);
            case 85:
                return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
            case 88:
                if ((active0 & 0x2000L) != 0L) {
                    jjmatchedKind = 13;
                    jjmatchedPos = 4;
                }
                break;
            case 99:
                return jjMoveStringLiteralDfa5_0(active0, 0x10c0000L);
            case 101:
                if ((active0 & 0x1000L) != 0L) {
                    jjmatchedKind = 12;
                    jjmatchedPos = 4;
                }
                break;
            case 103:
                if ((active0 & 0x40L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 4;
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
            case 111:
                return jjMoveStringLiteralDfa5_0(active0, 0x800L);
            case 114:
                return jjMoveStringLiteralDfa5_0(active0, 0x200080L);
            case 116:
                return jjMoveStringLiteralDfa5_0(active0, 0x400100L);
            case 117:
                return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
            case 120:
                if ((active0 & 0x2000L) != 0L) {
                    jjmatchedKind = 13;
                    jjmatchedPos = 4;
                }
                break;
            default:
                break;
        }
        return jjMoveNfa_0(5, 4);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 4);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(5, 4);
        }
        switch (curChar) {
            case 65:
                return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
            case 69:
                if ((active0 & 0x100L) != 0L) {
                    jjmatchedKind = 8;
                    jjmatchedPos = 5;
                } else if ((active0 & 0x400000L) != 0L) {
                    jjmatchedKind = 22;
                    jjmatchedPos = 5;
                }
                break;
            case 73:
                return jjMoveStringLiteralDfa6_0(active0, 0x80L);
            case 78:
                return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
            case 82:
                return jjMoveStringLiteralDfa6_0(active0, 0x800L);
            case 84:
                if ((active0 & 0x40000L) != 0L) {
                    jjmatchedKind = 18;
                    jjmatchedPos = 5;
                } else if ((active0 & 0x1000000L) != 0L) {
                    jjmatchedKind = 24;
                    jjmatchedPos = 5;
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x88000L);
            case 97:
                return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
            case 101:
                if ((active0 & 0x100L) != 0L) {
                    jjmatchedKind = 8;
                    jjmatchedPos = 5;
                } else if ((active0 & 0x400000L) != 0L) {
                    jjmatchedKind = 22;
                    jjmatchedPos = 5;
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0x80L);
            case 110:
                return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
            case 114:
                return jjMoveStringLiteralDfa6_0(active0, 0x800L);
            case 116:
                if ((active0 & 0x40000L) != 0L) {
                    jjmatchedKind = 18;
                    jjmatchedPos = 5;
                } else if ((active0 & 0x1000000L) != 0L) {
                    jjmatchedKind = 24;
                    jjmatchedPos = 5;
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x88000L);
            default:
                break;
        }
        return jjMoveNfa_0(5, 5);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 5);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(5, 5);
        }
        switch (curChar) {
            case 65:
                return jjMoveStringLiteralDfa7_0(active0, 0x200800L);
            case 66:
                return jjMoveStringLiteralDfa7_0(active0, 0x80L);
            case 73:
                return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
            case 76:
                if ((active0 & 0x800000L) != 0L) {
                    jjmatchedKind = 23;
                    jjmatchedPos = 6;
                }
                break;
            case 83:
                return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
            case 97:
                return jjMoveStringLiteralDfa7_0(active0, 0x200800L);
            case 98:
                return jjMoveStringLiteralDfa7_0(active0, 0x80L);
            case 105:
                return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
            case 108:
                if ((active0 & 0x800000L) != 0L) {
                    jjmatchedKind = 23;
                    jjmatchedPos = 6;
                }
                break;
            case 115:
                return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
            default:
                break;
        }
        return jjMoveNfa_0(5, 6);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 6);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(5, 6);
        }
        switch (curChar) {
            case 67:
                return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
            case 76:
                if ((active0 & 0x200000L) != 0L) {
                    jjmatchedKind = 21;
                    jjmatchedPos = 7;
                }
                break;
            case 79:
                return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
            case 82:
                return jjMoveStringLiteralDfa8_0(active0, 0x800L);
            case 85:
                return jjMoveStringLiteralDfa8_0(active0, 0x80L);
            case 99:
                return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
            case 108:
                if ((active0 & 0x200000L) != 0L) {
                    jjmatchedKind = 21;
                    jjmatchedPos = 7;
                }
                break;
            case 111:
                return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
            case 114:
                return jjMoveStringLiteralDfa8_0(active0, 0x800L);
            case 117:
                return jjMoveStringLiteralDfa8_0(active0, 0x80L);
            default:
                break;
        }
        return jjMoveNfa_0(5, 7);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 7);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(5, 7);
        }
        switch (curChar) {
            case 78:
                return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
            case 82:
                return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
            case 84:
                return jjMoveStringLiteralDfa9_0(active0, 0x80L);
            case 89:
                if ((active0 & 0x800L) != 0L) {
                    jjmatchedKind = 11;
                    jjmatchedPos = 8;
                }
                break;
            case 110:
                return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
            case 114:
                return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
            case 116:
                return jjMoveStringLiteralDfa9_0(active0, 0x80L);
            case 121:
                if ((active0 & 0x800L) != 0L) {
                    jjmatchedKind = 11;
                    jjmatchedPos = 8;
                }
                break;
            default:
                break;
        }
        return jjMoveNfa_0(5, 8);
    }

    private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 8);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(5, 8);
        }
        switch (curChar) {
            case 69:
                return jjMoveStringLiteralDfa10_0(active0, 0x8080L);
            case 73:
                return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
            case 101:
                return jjMoveStringLiteralDfa10_0(active0, 0x8080L);
            case 105:
                return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
            default:
                break;
        }
        return jjMoveNfa_0(5, 9);
    }

    private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 9);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(5, 9);
        }
        switch (curChar) {
            case 68:
                if ((active0 & 0x80L) != 0L) {
                    jjmatchedKind = 7;
                    jjmatchedPos = 10;
                } else if ((active0 & 0x8000L) != 0L) {
                    jjmatchedKind = 15;
                    jjmatchedPos = 10;
                }
                break;
            case 80:
                return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
            case 100:
                if ((active0 & 0x80L) != 0L) {
                    jjmatchedKind = 7;
                    jjmatchedPos = 10;
                } else if ((active0 & 0x8000L) != 0L) {
                    jjmatchedKind = 15;
                    jjmatchedPos = 10;
                }
                break;
            case 112:
                return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
            default:
                break;
        }
        return jjMoveNfa_0(5, 10);
    }

    private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(5, 10);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(5, 10);
        }
        switch (curChar) {
            case 84:
                if ((active0 & 0x80000L) != 0L) {
                    jjmatchedKind = 19;
                    jjmatchedPos = 11;
                }
                break;
            case 116:
                if ((active0 & 0x80000L) != 0L) {
                    jjmatchedKind = 19;
                    jjmatchedPos = 11;
                }
                break;
            default:
                break;
        }
        return jjMoveNfa_0(5, 11);
    }

    static final long[] jjbitVec0 =
        {0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL};
    static final long[] jjbitVec2 = {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};
    static final long[] jjbitVec3 =
        {0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL};
    static final long[] jjbitVec4 = {0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL};
    static final long[] jjbitVec5 =
        {0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L};
    static final long[] jjbitVec6 =
        {0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL};
    static final long[] jjbitVec7 =
        {0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL};
    static final long[] jjbitVec8 =
        {0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L};
    static final long[] jjbitVec9 =
        {0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL};
    static final long[] jjbitVec10 = {0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L};
    static final long[] jjbitVec11 =
        {0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL};
    static final long[] jjbitVec12 =
        {0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL};
    static final long[] jjbitVec13 =
        {0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L};
    static final long[] jjbitVec14 =
        {0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL};
    static final long[] jjbitVec15 =
        {0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL};
    static final long[] jjbitVec16 =
        {0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL};
    static final long[] jjbitVec17 =
        {0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L};
    static final long[] jjbitVec18 =
        {0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL};
    static final long[] jjbitVec19 =
        {0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL};
    static final long[] jjbitVec20 =
        {0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL};
    static final long[] jjbitVec21 =
        {0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL};
    static final long[] jjbitVec22 =
        {0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL};
    static final long[] jjbitVec23 = {0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL};
    static final long[] jjbitVec24 = {0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L};
    static final long[] jjbitVec25 =
        {0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL};
    static final long[] jjbitVec26 =
        {0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL};
    static final long[] jjbitVec27 =
        {0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L};
    static final long[] jjbitVec28 = {0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L};
    static final long[] jjbitVec29 =
        {0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL};
    static final long[] jjbitVec30 =
        {0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L};
    static final long[] jjbitVec31 =
        {0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L};
    static final long[] jjbitVec32 =
        {0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L};
    static final long[] jjbitVec33 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L};
    static final long[] jjbitVec34 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L};
    static final long[] jjbitVec35 = {0x3fffffffffffL, 0x0L, 0x0L, 0x0L};
    static final long[] jjbitVec36 =
        {0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L};
    static final long[] jjbitVec37 =
        {0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL};
    static final long[] jjbitVec38 =
        {0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL};
    static final long[] jjbitVec39 =
        {0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL};
    static final long[] jjbitVec40 = {0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL};
    static final long[] jjbitVec41 =
        {0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL};
    static final long[] jjbitVec42 =
        {0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL};
    static final long[] jjbitVec43 =
        {0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L};
    static final long[] jjbitVec44 =
        {0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL};
    static final long[] jjbitVec45 = {0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L};
    static final long[] jjbitVec46 =
        {0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L};
    static final long[] jjbitVec47 =
        {0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L};
    static final long[] jjbitVec48 = {0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L};
    static final long[] jjbitVec49 =
        {0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L};
    static final long[] jjbitVec50 = {0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL};
    static final long[] jjbitVec51 = {0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL};
    static final long[] jjbitVec52 = {0x1L, 0x7fffffffeffL, 0xf00L, 0x0L};
    static final long[] jjbitVec53 =
        {0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL};
    static final long[] jjbitVec54 =
        {0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL};
    static final long[] jjbitVec55 = {0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L};
    static final long[] jjbitVec56 = {0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L};
    static final long[] jjbitVec57 =
        {0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L};
    static final long[] jjbitVec58 =
        {0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL};
    static final long[] jjbitVec59 =
        {0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L};
    static final long[] jjbitVec60 =
        {0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL};
    static final long[] jjbitVec61 =
        {0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL};

    private int jjMoveNfa_0(int startState, int curPos) {
        int strKind = jjmatchedKind;
        int strPos = jjmatchedPos;
        int seenUpto;
        input_stream.backup(seenUpto = curPos + 1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            throw new Error("Internal Error");
        }
        curPos = 0;
        int startsAt = 0;
        jjnewStateCnt = 93;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 5:
                            if ((0x3ff00100fffc1ffL & l) != 0L) {
                                if (kind > 38)
                                    kind = 38;
                            } else if ((0x100003600L & l) != 0L) {
                                if (kind > 33)
                                    kind = 33;
                                jjCheckNAdd(87);
                            } else if (curChar == 34)
                                jjCheckNAddStates(0, 2);
                            else if (curChar == 39)
                                jjCheckNAddStates(3, 5);
                            else if (curChar == 45)
                                jjstateSet[jjnewStateCnt++] = 6;
                            else if (curChar == 47)
                                jjstateSet[jjnewStateCnt++] = 0;
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 34)
                                    kind = 34;
                                jjCheckNAdd(90);
                            } else if (curChar == 36) {
                                if (kind > 36)
                                    kind = 36;
                                jjCheckNAdd(92);
                            }
                            break;
                        case 0:
                            if (curChar != 47)
                                break;
                            if (kind > 2)
                                kind = 2;
                            jjCheckNAddStates(6, 8);
                            break;
                        case 1:
                            if ((0xffffffffffffdbffL & l) == 0L)
                                break;
                            if (kind > 2)
                                kind = 2;
                            jjCheckNAddStates(6, 8);
                            break;
                        case 2:
                            if ((0x2400L & l) != 0L && kind > 2)
                                kind = 2;
                            break;
                        case 3:
                            if (curChar == 10 && kind > 2)
                                kind = 2;
                            break;
                        case 4:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 3;
                            break;
                        case 6:
                            if (curChar != 45)
                                break;
                            if (kind > 3)
                                kind = 3;
                            jjCheckNAddStates(9, 11);
                            break;
                        case 7:
                            if ((0xffffffffffffdbffL & l) == 0L)
                                break;
                            if (kind > 3)
                                kind = 3;
                            jjCheckNAddStates(9, 11);
                            break;
                        case 8:
                            if ((0x2400L & l) != 0L && kind > 3)
                                kind = 3;
                            break;
                        case 9:
                            if (curChar == 10 && kind > 3)
                                kind = 3;
                            break;
                        case 10:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 9;
                            break;
                        case 11:
                            if (curChar == 45)
                                jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 12:
                            if (curChar == 39)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 13:
                            if ((0xffffff7fffffdbffL & l) != 0L)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 15:
                            if ((0x8400002400L & l) != 0L)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 16:
                            if (curChar == 39 && kind > 28)
                                kind = 28;
                            break;
                        case 17:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(12, 15);
                            break;
                        case 18:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 19:
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 20;
                            break;
                        case 20:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(18);
                            break;
                        case 21:
                            if (curChar == 10)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 22:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 21;
                            break;
                        case 23:
                            if (curChar == 34)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 24:
                            if ((0xfffffffbffffdbffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 26:
                            if ((0x8400002400L & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 27:
                            if (curChar == 34 && kind > 29)
                                kind = 29;
                            break;
                        case 28:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(16, 19);
                            break;
                        case 29:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 30:
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 31;
                            break;
                        case 31:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(29);
                            break;
                        case 32:
                            if (curChar == 10)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 33:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 32;
                            break;
                        case 35:
                            jjCheckNAddStates(20, 22);
                            break;
                        case 37:
                            if (curChar == 39)
                                jjCheckNAddStates(20, 22);
                            break;
                        case 39:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(23, 26);
                            break;
                        case 40:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(20, 22);
                            break;
                        case 41:
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 42;
                            break;
                        case 42:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(40);
                            break;
                        case 44:
                            jjCheckNAddStates(27, 29);
                            break;
                        case 46:
                            if (curChar == 39)
                                jjCheckNAddStates(27, 29);
                            break;
                        case 48:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(30, 33);
                            break;
                        case 49:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(27, 29);
                            break;
                        case 50:
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 51;
                            break;
                        case 51:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(49);
                            break;
                        case 53:
                            if ((0xf7ffffffffffffffL & l) == 0L)
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjCheckNAddStates(34, 37);
                            break;
                        case 55:
                        case 60:
                            if (curChar != 39)
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjCheckNAddStates(34, 37);
                            break;
                        case 56:
                            if (curChar == 39)
                                jjCheckNAddStates(38, 40);
                            break;
                        case 57:
                            if ((0xffffff7fffffdbffL & l) != 0L)
                                jjCheckNAddStates(38, 40);
                            break;
                        case 59:
                            if ((0x8400002400L & l) != 0L)
                                jjCheckNAddStates(38, 40);
                            break;
                        case 61:
                            if (curChar == 34)
                                jjCheckNAddStates(41, 43);
                            break;
                        case 62:
                            if ((0xfffffffbffffdbffL & l) != 0L)
                                jjCheckNAddStates(41, 43);
                            break;
                        case 64:
                            if ((0x8400002400L & l) != 0L)
                                jjCheckNAddStates(41, 43);
                            break;
                        case 65:
                            if (curChar != 34)
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjCheckNAddStates(34, 37);
                            break;
                        case 66:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(44, 47);
                            break;
                        case 67:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(41, 43);
                            break;
                        case 68:
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 69;
                            break;
                        case 69:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(67);
                            break;
                        case 70:
                            if (curChar == 10)
                                jjCheckNAddStates(41, 43);
                            break;
                        case 71:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 70;
                            break;
                        case 72:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(48, 51);
                            break;
                        case 73:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(38, 40);
                            break;
                        case 74:
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 75;
                            break;
                        case 75:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(73);
                            break;
                        case 76:
                            if (curChar == 10)
                                jjCheckNAddStates(38, 40);
                            break;
                        case 77:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 76;
                            break;
                        case 78:
                            if ((0xff000000000000L & l) == 0L)
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjCheckNAddStates(52, 56);
                            break;
                        case 79:
                            if ((0xff000000000000L & l) == 0L)
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjCheckNAddStates(34, 37);
                            break;
                        case 80:
                            if ((0xf000000000000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 81;
                            break;
                        case 81:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAdd(79);
                            break;
                        case 87:
                            if ((0x100003600L & l) == 0L)
                                break;
                            if (kind > 33)
                                kind = 33;
                            jjCheckNAdd(87);
                            break;
                        case 88:
                            if ((0x3ff00100fffc1ffL & l) != 0L && kind > 38)
                                kind = 38;
                            break;
                        case 89:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 34)
                                kind = 34;
                            jjCheckNAdd(90);
                            break;
                        case 90:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 35)
                                kind = 35;
                            jjCheckNAdd(90);
                            break;
                        case 91:
                            if (curChar != 36)
                                break;
                            if (kind > 36)
                                kind = 36;
                            jjCheckNAdd(92);
                            break;
                        case 92:
                            if ((0x3ff00100fffc1ffL & l) == 0L)
                                break;
                            if (kind > 36)
                                kind = 36;
                            jjCheckNAdd(92);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 5:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 36)
                                    kind = 36;
                                jjCheckNAdd(92);
                            } else if (curChar == 91)
                                jjCheckNAddStates(27, 29);
                            else if (curChar == 123)
                                jjCheckNAddStates(20, 22);
                            if ((0x87fffffe87fffffeL & l) != 0L) {
                                if (kind > 38)
                                    kind = 38;
                            }
                            if ((0x8000000080000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 85;
                            break;
                        case 1:
                            if (kind > 2)
                                kind = 2;
                            jjAddStates(6, 8);
                            break;
                        case 7:
                            if (kind > 3)
                                kind = 3;
                            jjAddStates(9, 11);
                            break;
                        case 13:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 14:
                            if (curChar == 92)
                                jjAddStates(57, 60);
                            break;
                        case 15:
                            if ((0x14404410144044L & l) != 0L)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 24:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 25:
                            if (curChar == 92)
                                jjAddStates(61, 64);
                            break;
                        case 26:
                            if ((0x14404410144044L & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 34:
                            if (curChar == 123)
                                jjCheckNAddStates(20, 22);
                            break;
                        case 35:
                            if ((0xdfffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(20, 22);
                            break;
                        case 36:
                            if (curChar == 92)
                                jjAddStates(65, 67);
                            break;
                        case 37:
                            if ((0x2014404410144044L & l) != 0L)
                                jjCheckNAddStates(20, 22);
                            break;
                        case 38:
                            if (curChar == 125 && kind > 30)
                                kind = 30;
                            break;
                        case 43:
                            if (curChar == 91)
                                jjCheckNAddStates(27, 29);
                            break;
                        case 44:
                            if ((0xffffffffcfffffffL & l) != 0L)
                                jjCheckNAddStates(27, 29);
                            break;
                        case 45:
                            if (curChar == 92)
                                jjAddStates(68, 70);
                            break;
                        case 46:
                            if ((0x14404430144044L & l) != 0L)
                                jjCheckNAddStates(27, 29);
                            break;
                        case 47:
                            if (curChar == 93 && kind > 31)
                                kind = 31;
                            break;
                        case 52:
                            if ((0x10000000100000L & l) == 0L)
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjCheckNAddStates(34, 37);
                            break;
                        case 53:
                            if ((0xffffffffefffffffL & l) == 0L)
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjCheckNAddStates(34, 37);
                            break;
                        case 54:
                            if (curChar == 92)
                                jjAddStates(71, 73);
                            break;
                        case 55:
                            if ((0x14404410144044L & l) == 0L)
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjCheckNAddStates(34, 37);
                            break;
                        case 57:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(38, 40);
                            break;
                        case 58:
                            if (curChar == 92)
                                jjAddStates(74, 77);
                            break;
                        case 59:
                            if ((0x14404410144044L & l) != 0L)
                                jjCheckNAddStates(38, 40);
                            break;
                        case 62:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(41, 43);
                            break;
                        case 63:
                            if (curChar == 92)
                                jjAddStates(78, 81);
                            break;
                        case 64:
                            if ((0x14404410144044L & l) != 0L)
                                jjCheckNAddStates(41, 43);
                            break;
                        case 82:
                            if ((0x800000008L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 52;
                            break;
                        case 83:
                            if ((0x2000000020L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 82;
                            break;
                        case 84:
                            if ((0x100000001000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 83;
                            break;
                        case 85:
                            if ((0x2000000020L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 84;
                            break;
                        case 86:
                            if ((0x8000000080000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 85;
                            break;
                        case 88:
                            if ((0x87fffffe87fffffeL & l) != 0L && kind > 38)
                                kind = 38;
                            break;
                        case 91:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 36)
                                kind = 36;
                            jjCheckNAdd(92);
                            break;
                        case 92:
                            if ((0x87fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 36)
                                kind = 36;
                            jjCheckNAdd(92);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 5:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                                if (kind > 38)
                                    kind = 38;
                            }
                            if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                                if (kind > 36)
                                    kind = 36;
                                jjCheckNAdd(92);
                            }
                            break;
                        case 1:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 2)
                                kind = 2;
                            jjAddStates(6, 8);
                            break;
                        case 7:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 3)
                                kind = 3;
                            jjAddStates(9, 11);
                            break;
                        case 13:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(3, 5);
                            break;
                        case 24:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(0, 2);
                            break;
                        case 35:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(20, 22);
                            break;
                        case 44:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(27, 29);
                            break;
                        case 53:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjAddStates(34, 37);
                            break;
                        case 57:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(38, 40);
                            break;
                        case 62:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(41, 43);
                            break;
                        case 88:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 38)
                                kind = 38;
                            break;
                        case 91:
                            if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 36)
                                kind = 36;
                            jjCheckNAdd(92);
                            break;
                        case 92:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 36)
                                kind = 36;
                            jjCheckNAdd(92);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 93 - (jjnewStateCnt = startsAt)))
                break;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                break;
            }
        }
        if (jjmatchedPos > strPos)
            return curPos;

        int toRet = Math.max(curPos, seenUpto);

        if (curPos < toRet)
            for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
                try {
                    curChar = input_stream.readChar();
                } catch (java.io.IOException e) {
                    throw new Error("Internal Error : Please send a bug report.");
                }

        if (jjmatchedPos < strPos) {
            jjmatchedKind = strKind;
            jjmatchedPos = strPos;
        } else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
            jjmatchedKind = strKind;

        return toRet;
    }

    private int jjMoveStringLiteralDfa0_1() {
        switch (curChar) {
            case 42:
                return jjMoveStringLiteralDfa1_1(0x10L);
            default:
                return 1;
        }
    }

    private int jjMoveStringLiteralDfa1_1(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 1;
        }
        switch (curChar) {
            case 47:
                if ((active0 & 0x10L) != 0L)
                    return jjStopAtPos(1, 4);
                break;
            default:
                return 2;
        }
        return 2;
    }

    static final int[] jjnextStates =
        {24, 25, 27, 13, 14, 16, 1, 2, 4, 7, 8, 10, 13, 14, 18, 16, 24, 25, 29, 27, 35, 36, 38, 35,
            36, 40, 38, 44, 45, 47, 44, 45, 49, 47, 53, 54, 56, 61, 57, 58, 60, 62, 63, 65, 62, 63,
            67, 65, 57, 58, 73, 60, 53, 54, 79, 56, 61, 15, 17, 19, 22, 26, 28, 30, 33, 37, 39, 41,
            46, 48, 50, 55, 78, 80, 59, 72, 74, 77, 64, 66, 68, 71,};

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                if ((jjbitVec0[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec4[i2] & l2) != 0L);
            case 2:
                return ((jjbitVec5[i2] & l2) != 0L);
            case 3:
                return ((jjbitVec6[i2] & l2) != 0L);
            case 4:
                return ((jjbitVec7[i2] & l2) != 0L);
            case 5:
                return ((jjbitVec8[i2] & l2) != 0L);
            case 6:
                return ((jjbitVec9[i2] & l2) != 0L);
            case 7:
                return ((jjbitVec10[i2] & l2) != 0L);
            case 9:
                return ((jjbitVec11[i2] & l2) != 0L);
            case 10:
                return ((jjbitVec12[i2] & l2) != 0L);
            case 11:
                return ((jjbitVec13[i2] & l2) != 0L);
            case 12:
                return ((jjbitVec14[i2] & l2) != 0L);
            case 13:
                return ((jjbitVec15[i2] & l2) != 0L);
            case 14:
                return ((jjbitVec16[i2] & l2) != 0L);
            case 15:
                return ((jjbitVec17[i2] & l2) != 0L);
            case 16:
                return ((jjbitVec18[i2] & l2) != 0L);
            case 17:
                return ((jjbitVec19[i2] & l2) != 0L);
            case 18:
                return ((jjbitVec20[i2] & l2) != 0L);
            case 19:
                return ((jjbitVec21[i2] & l2) != 0L);
            case 20:
                return ((jjbitVec0[i2] & l2) != 0L);
            case 22:
                return ((jjbitVec22[i2] & l2) != 0L);
            case 23:
                return ((jjbitVec23[i2] & l2) != 0L);
            case 24:
                return ((jjbitVec24[i2] & l2) != 0L);
            case 30:
                return ((jjbitVec25[i2] & l2) != 0L);
            case 31:
                return ((jjbitVec26[i2] & l2) != 0L);
            case 32:
                return ((jjbitVec27[i2] & l2) != 0L);
            case 33:
                return ((jjbitVec28[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec29[i2] & l2) != 0L);
            case 49:
                return ((jjbitVec30[i2] & l2) != 0L);
            case 77:
                return ((jjbitVec31[i2] & l2) != 0L);
            case 159:
                return ((jjbitVec32[i2] & l2) != 0L);
            case 164:
                return ((jjbitVec33[i2] & l2) != 0L);
            case 215:
                return ((jjbitVec34[i2] & l2) != 0L);
            case 250:
                return ((jjbitVec35[i2] & l2) != 0L);
            case 251:
                return ((jjbitVec36[i2] & l2) != 0L);
            case 253:
                return ((jjbitVec37[i2] & l2) != 0L);
            case 254:
                return ((jjbitVec38[i2] & l2) != 0L);
            case 255:
                return ((jjbitVec39[i2] & l2) != 0L);
            default:
                if ((jjbitVec3[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec40[i2] & l2) != 0L);
            case 2:
                return ((jjbitVec5[i2] & l2) != 0L);
            case 3:
                return ((jjbitVec41[i2] & l2) != 0L);
            case 4:
                return ((jjbitVec42[i2] & l2) != 0L);
            case 5:
                return ((jjbitVec43[i2] & l2) != 0L);
            case 6:
                return ((jjbitVec44[i2] & l2) != 0L);
            case 7:
                return ((jjbitVec45[i2] & l2) != 0L);
            case 9:
                return ((jjbitVec46[i2] & l2) != 0L);
            case 10:
                return ((jjbitVec47[i2] & l2) != 0L);
            case 11:
                return ((jjbitVec48[i2] & l2) != 0L);
            case 12:
                return ((jjbitVec49[i2] & l2) != 0L);
            case 13:
                return ((jjbitVec50[i2] & l2) != 0L);
            case 14:
                return ((jjbitVec51[i2] & l2) != 0L);
            case 15:
                return ((jjbitVec52[i2] & l2) != 0L);
            case 16:
                return ((jjbitVec53[i2] & l2) != 0L);
            case 17:
                return ((jjbitVec19[i2] & l2) != 0L);
            case 18:
                return ((jjbitVec20[i2] & l2) != 0L);
            case 19:
                return ((jjbitVec54[i2] & l2) != 0L);
            case 20:
                return ((jjbitVec0[i2] & l2) != 0L);
            case 22:
                return ((jjbitVec22[i2] & l2) != 0L);
            case 23:
                return ((jjbitVec55[i2] & l2) != 0L);
            case 24:
                return ((jjbitVec56[i2] & l2) != 0L);
            case 30:
                return ((jjbitVec25[i2] & l2) != 0L);
            case 31:
                return ((jjbitVec26[i2] & l2) != 0L);
            case 32:
                return ((jjbitVec57[i2] & l2) != 0L);
            case 33:
                return ((jjbitVec28[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec58[i2] & l2) != 0L);
            case 49:
                return ((jjbitVec30[i2] & l2) != 0L);
            case 77:
                return ((jjbitVec31[i2] & l2) != 0L);
            case 159:
                return ((jjbitVec32[i2] & l2) != 0L);
            case 164:
                return ((jjbitVec33[i2] & l2) != 0L);
            case 215:
                return ((jjbitVec34[i2] & l2) != 0L);
            case 250:
                return ((jjbitVec35[i2] & l2) != 0L);
            case 251:
                return ((jjbitVec59[i2] & l2) != 0L);
            case 253:
                return ((jjbitVec37[i2] & l2) != 0L);
            case 254:
                return ((jjbitVec60[i2] & l2) != 0L);
            case 255:
                return ((jjbitVec61[i2] & l2) != 0L);
            default:
                if ((jjbitVec3[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages =
        {"", "\57\52", null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, "\54", null, "\73", null,
            null, null, null, null, null, null, null, null, null, null, "\50", "\51", "\56",};

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {"DEFAULT", "IN_MULTI_LINE_COMMENT",};

    /**
     * Lex State array.
     */
    public static final int[] jjnewLexState =
        {-1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,};
    static final long[] jjtoToken = {0x3ffffffffdfL,};
    static final long[] jjtoMore = {0x20L,};
    protected JavaCharStream input_stream;
    private final int[] jjrounds = new int[93];
    private final int[] jjstateSet = new int[186];
    protected char curChar;

    /**
     * Constructor.
     */
    public AdpDBQueryParserTokenManager(JavaCharStream stream) {
        if (JavaCharStream.staticFlag)
            throw new Error(
                "ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public AdpDBQueryParserTokenManager(JavaCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(JavaCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 93; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(JavaCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if (lexState >= 2 || lexState < 0)
            throw new TokenMgrError(
                "Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            for (; ; ) {
                switch (curLexState) {
                    case 0:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        if (jjmatchedPos == 0 && jjmatchedKind > 5) {
                            jjmatchedKind = 5;
                        }
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos)
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        return matchedToken;
                    }
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (java.io.IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else
                        error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after,
                    curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
