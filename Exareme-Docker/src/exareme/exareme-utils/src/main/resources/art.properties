# -------------------------------------------------------------------------------- #
# Run Time (ART) configuration file                                            #
# -------------------------------------------------------------------------------- #
# RMI
# -------------------------------------------------------------------------------- #
art.rmi.retryTimes=10
art.rmi.retryPeriod_sec=3
# Log
# -------------------------------------------------------------------------------- #
art.log.level=INFO
#art.log.level one of (DEBUG/INFO/ERROR). Mind the fact that art.log.level effects how fast or slow the worker starts.
#For example, DEBUG causes worker to slowly get up and running while INFO is more instant
# Registry
# -------------------------------------------------------------------------------- #
art.registry.rmi.defaultPort=1099
art.registry.rmi.exportPort=1098
#art.registry.rmi.exportPort=0
art.registry.rmi.RmiArtRegistryProxy.caching=false
art.registry.rmi.RmiArtRegistryProxy.cacheSize=10
# Container
# -------------------------------------------------------------------------------- #
art.container.rmi.RmiContainer.defaultID=0
art.container.thread.OperatorMonitorThread.IsAlivePeriod=1
art.container.rmi.RmiContainer.lifetime=30000
art.container.maxStatusReportPeriod=1000
# Adaptor implementation [rmi, socket] (socket is very efficient with big data).
art.container.adaptor.impl=socket
# The temporary storage for sessions and buffer pool.
art.container.diskRoot=/tmp/adp/
art.container.bufferPoolRoot=buffer_pool/
art.container.operatorRoot=session/
# Memory limits
art.container.bufferPoolSize_mb=400
art.container.bufferPoolSessionSize_mb=0
art.container.pipePoolSize_mb=1000
art.container.zipLevel=1
art.container.zipBufferSize_kb=16
art.container.ioBufferSize_kb=512
# Execution engine
# -------------------------------------------------------------------------------- #
art.executionEngine.rmi.RmiExecutionEngine.lifetime=30000
art.executionEngine.forceSessionStopAfter_sec=10
art.executionEngine.dataOperators.memory=2
# centralized    = Use a single node
# distributed    = Use workers given the schedule
# dynamice       = Use workers without the schdule (not implemented yet)
art.scheduler.mode=centralized
art.container.data.port=8088
# Behavior when a container is not responding
# returnError   = Abort execution and throw exception
art.container.errorBehavior=returnError
# -------------------------------------------------------------------------------- #
