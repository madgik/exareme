package madgik.exareme.master.engine.iterations;

import madgik.exareme.common.consts.HBPConstants;
import madgik.exareme.master.engine.iterations.handler.IterationsConstants;
import madgik.exareme.master.queryProcessor.HBP.AlgorithmProperties;
import madgik.exareme.master.queryProcessor.HBP.ComposerConstants;
import madgik.exareme.utils.properties.AdpProperties;
import madgik.exareme.utils.properties.MutableProperties;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.HashMap;

/**
 * Wrapper class which encloses common methods among tests
 *
 * @author Christos Aslanoglou <br> caslanoglou@di.uoa.gr <br> University of Athens / Department of
 * Informatics and Telecommunications.
 */
public class IterationsTestGenericUtils {

    public static final String ALGORITHMS_DEV_DIRECTORY
            = "src/test/resources/madgik/exareme-tools/algorithms-dev";

    /**
     * Generate dummy algorithm parameters to simulate request from gateway.
     *
     * @param algorithmName                            the algorithm key that was generated
     * @param iterationsMaximumNumber                  the maximum iterations number of the algorithm (according
     *                                                 to properties file), should be a number
     * @return the algorithm properties (usually generated by the gateway handler)
     */
    public static HashMap<String, String> prepareParameterProperties(
            String algorithmName,
            String iterationsMaximumNumber) {
        HashMap<String, String> inputContent = new HashMap<String, String>();
        if (iterationsMaximumNumber != null)
            inputContent.put(
                    IterationsConstants.iterationsPropertyMaximumNumber,
                    iterationsMaximumNumber);
        inputContent.put(ComposerConstants.algorithmKey, algorithmName);
        inputContent.put(ComposerConstants.outputGlobalTblKey, "output");

        return inputContent;
    }

    /**
     * Sets the demo-algorithms working directory path of HBPConstants to ALGORITHMS_DEV_DIRECTORY.
     *
     * @throws IOException if getCanonicalPath fails
     */
    public static void overwriteHBPConstantsDEMO_ALGOR_WORKDIR()
            throws Exception {
        // Update HBP.demo algorithms working directory field
        File algorithmsDevDirectory = new File(ALGORITHMS_DEV_DIRECTORY);
        setFinalStatic(
                HBPConstants.class.getDeclaredField("DEMO_ALGORITHMS_WORKING_DIRECTORY"),
                algorithmsDevDirectory.getCanonicalPath());
    }

    /**
     * Sets the algorithms repository path of gateway properties to ALGORITHMS_DEV_DIRECTORY and
     * then initializes composer.
     *
     * @throws IOException if getCanonicalPath fails TODO Should be changed when testing with actual
     *                     remote repository is integrated.
     */
    public static void overwriteDemoRepositoryPathGatewayProperty()
            throws Exception {
        // Overwriting demo repository path property.
        // GatewayProperties is a MutableProperties object actually (see AdpProperties static
        // initialization block).
        final MutableProperties gatewayProperties =
                (MutableProperties) AdpProperties.getGatewayProperties();
        File algorithmsDevDirectory = new File(ALGORITHMS_DEV_DIRECTORY);
        gatewayProperties.setStringProperty("algorithms.path",
                algorithmsDevDirectory.getCanonicalPath() + "/");
    }

    /**
     * Sets a final static field - <b>use with caution</b>
     *
     * @see <a href="http://stackoverflow.com/questions/30703149/mock-private-static-final-field-\
     * using-mockito-or-jmockit">StackOverflow related answer</a>
     */
    private static void setFinalStatic(Field field, Object newValue) throws Exception {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);
        field.set(null, newValue);
    }


    /**
     * Generates a unique algorithm key.
     *
     * <p> It provides a unique name with <b>granularity of a ms!</b>
     *
     * @param algorithmProperties the algorithm's properties object
     * @return a unique algorithm key.
     */
    public static String generateAlgorithmKey(AlgorithmProperties algorithmProperties) {
        return algorithmProperties.getName() + "_" + String.valueOf(System.currentTimeMillis());
    }
}
